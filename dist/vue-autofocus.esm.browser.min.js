/*!
  * vue-autofocus v1.0.2
  * (c) 2019 AndrÃ© Bunse (aburai)
  * @license MIT
  */
const e={initDelay:300,focusDelay:100,refocusDelay:100,select:!0,debug:!1},t=["INPUT","TEXTAREA"],n=t.concat(["SELECT","BUTTON"]),o=e=>{if(!e)return;if("function"!=typeof e.querySelector)return;if(n.includes(e.nodeName)&&!i(e))return e;let t=e.querySelector("[autofocus]");if(!t){const o=n.find(t=>!i(e.querySelector(t)));o&&(t=e.querySelector(o))}return t},i=e=>{if(!e)return"el missing";return e.getAttribute("disabled")||e.classList.contains("disabled")?"el disabled":""},c=(e,t)=>{let n,o;if(t&&t.parent){const e=t.parent;n=e.clientWidth,o=e.clientHeight}else n=window.innerWidth,o=window.innerHeight;const i=e.getBoundingClientRect();return i.left>=0&&i.left<n&&i.top>=0&&i.top<o};let l;class s{init(e){}}s.install=function n(s,r){if(n.installed&&l===s)return;n.installed=!0,l=s;const u=Object.assign({},e,r);let a,f,d,m;s.prototype.$autofocus=function(e,n){const s=Object.assign({},u,n);this.$nextTick(()=>{clearTimeout(a),a=setTimeout(()=>{const e=y();if(!c(e,s))return T("selector is not visible");const t=o(e);if(!(t instanceof HTMLElement))return T("found no element to focus",t);if(t===document.activeElement)return T("element already focused");const n=i(t);if(n)return T("error:",n,t);T("active element before",document.activeElement),this.$nextTick(()=>{clearTimeout(f),clearTimeout(d),clearTimeout(m),f=setTimeout(()=>{t.focus(),d=setTimeout(()=>{t!==document.activeElement&&t.focus(),m=setTimeout(()=>{t!==document.activeElement&&t.focus(),t===document.activeElement?(r(t),T("focused",t)):T("failed",document.activeElement),f=null,d=null,m=null},s.refocusDelay)},s.refocusDelay)},s.focusDelay)})},s.initDelay)});const r=(e,n,o)=>{if(s.select&&e&&e.nodeName&&t.includes(e.nodeName))if(e.createTextRange){const t=e.createTextRange();t.move("character",o),t.select()}else try{void 0!==n&&void 0!==o?e.setSelectionRange(n,o):e.select()}catch(e){console.warn("The input element type does not support selection")}},y=()=>{let t;if("object"==typeof e&&e.ref&&(e=this.$refs[e.ref]),e&&"string"==typeof e)t=this.$el.querySelector(e),T("by selector=%s",e,t);else if(e instanceof l){const n=e;t=n.$refs.input||n.$el,T("by vue component",e,t)}else T("by component $el",t=this.$el);return t};function T(e,t,n,o){s.debug&&console.log.apply(console,arguments)}}},s.version="1.0.2",window&&window.Vue&&window.Vue.use(s);export default s;